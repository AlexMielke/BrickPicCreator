import sys
import os
from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
                            QMetaObject, QObject, QPoint, QRect,
                            QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
                           QCursor, QFont, QFontDatabase, QGradient,
                           QIcon, QImage, QKeySequence, QLinearGradient,
                           QPainter, QPalette, QPixmap, QRadialGradient,
                           QTransform)
from PySide6.QtWidgets import (QAbstractItemView, QApplication, QCheckBox, QComboBox,
                               QFrame, QGroupBox, QHeaderView, QLabel,
                               QMainWindow, QMenu, QMenuBar, QPushButton,
                               QSizePolicy, QSlider, QTabWidget, QTableWidget, QTableWidgetItem,
                               QWidget, QFileDialog, QDialog, QDialogButtonBox, QTextBrowser)
from functions import *
from bricks import BrickSizes, ColourCodes


class AboutDialog(QDialog):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.setup()

    def setup(self):
        self.setObjectName("AboutDialog")
        self.setWindowModality(Qt.WindowModality.ApplicationModal)
        self.resize(570, 458)
        self.setModal(True)
        self.buttonBox = QDialogButtonBox(self)
        self.buttonBox.setGeometry(QRect(50, 420, 471, 32))
        self.buttonBox.setOrientation(Qt.Horizontal)
        self.buttonBox.setStandardButtons(QDialogButtonBox.Ok)
        self.buttonBox.setCenterButtons(True)
        self.buttonBox.setObjectName("buttonBox")
        self.label = QLabel(self)
        self.label.setGeometry(QRect(100, 10, 371, 91))
        font = QFont()
        font.setFamily("Arial")
        font.setPointSize(28)
        font.setBold(True)
        font.setWeight(QFont.Bold)
        self.label.setFont(font)
        self.label.setStyleSheet("color: darkRed")
        self.label.setAlignment(Qt.AlignCenter)
        self.label.setObjectName("label")
        self.textBrowser = QTextBrowser(self)
        self.textBrowser.setGeometry(QRect(10, 110, 551, 301))
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser.setOpenExternalLinks(True)
        self.textBrowser.setHtml("<html><head></head><body>\n"
                                 "<p style=\" text-align: center;font-size:18px;\"><br /> Klemmsteinbilder einfach erstellen!</p>"
                                 "<p style=\" text-align: center;font-size:12px;\">BrickPicCreator erstellt aus einem beliebig großen <br />Bild eine Steinliste und benötigte Anleitung <br /> Effiziente Berechnung um die Anzahl der Steine zu minimieren!</p>\n"
                                 "<p style=\" text-align: center;font-size:6px;\"></p>\n"
                                 "<p style=\" text-align: center;font-size:10px;\">Written in Python 3.10.8 <br />with PySide6 (v6.4.1), fpdf, NumPy and Pillow PIL</p>\n"
                                 "<p style=\" text-align: center;font-size:10px;\">Other modules used: os, sys</p>\n"
                                 "<p style=\" text-align: center;font-size:12px;\">(c) 2022 Alexander Mielke (<a href=\"mailto:alexandermielke@t-online.de\"><span style=\" text-decoration: underline; color:#2eb8e6;\">alexandermielke@t-online.de</span></a>)</p>\n"
                                 "<p style=\" text-align: center;font-size:12px;\"><a href=\"https://github.com/AlexMielke\"><span style=\" text-decoration: underline; color:#2eb8e6;\">GitHub-Repository</span></a></p>\n"
                                 "<p style=\" text-align: center;font-size:12px;\">Licence MIT Licence (see Licence file)</p></body></html>")
        self.setWindowTitle(QCoreApplication.translate("self", "Über BrickPicCreator"))
        self.label.setText(QCoreApplication.translate("self", "BrickPicCreator v1.0"))
        self.buttonBox.accepted.connect(self.close)
        QMetaObject.connectSlotsByName(self)


class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.setupUi()

    def setupUi(self):
        self.resize(1321, 873)
        sizePolicy = QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(sizePolicy)
        font = QFont()
        font.setPointSize(8)
        self.setFont(font)
        icon = QIcon()
        icon.addFile(u"BrickPicCreator.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.setWindowIcon(icon)
        self.setTabShape(QTabWidget.Rounded)
        self.actionNew_Project = QAction(self)
        self.actionNew_Project.setObjectName(u"actionNew_Project")
        self.actionOpen_Project = QAction(self)
        self.actionOpen_Project.setObjectName(u"actionOpen_Project")
        self.actionSave_Project = QAction(self)
        self.actionSave_Project.setObjectName(u"actionSave_Project")
        self.actionSave_Project_under = QAction(self)
        self.actionSave_Project_under.setObjectName(u"actionSave_Project_under")
        self.actionHilfe = QAction(self)
        self.actionHilfe.setObjectName(u"actionHilfe")
        self.actionAbout_BrickPicCreator = QAction(self)
        self.actionAbout_BrickPicCreator.setObjectName(u"actionAbout_BrickPicCreator")
        self.actionBeenden = QAction(self)
        self.actionBeenden.setObjectName(u"actionBeenden")
        self.actionOriginalbildOpen = QAction(self)
        self.actionOriginalbildOpen.setObjectName(u"actionOriginalbildOpen")
        self.actionBrickPicSave = QAction(self)
        self.actionBrickPicSave.setObjectName(u"actionBrickPicSave")
        self.actionBLSpeichern = QAction(self)
        self.actionBLSpeichern.setObjectName(u"actionBLSpeichern")
        self.actionBLDrucken = QAction(self)
        self.actionBLDrucken.setObjectName(u"actionBLDrucken")
        self.actionManSpeichern = QAction(self)
        self.actionManSpeichern.setObjectName(u"actionManSpeichern")
        self.actionManDrucken = QAction(self)
        self.actionManDrucken.setObjectName(u"actionManDrucken")
        self.centralwidget = QWidget(self)
        self.centralwidget.setObjectName(u"centralwidget")
        self.BrickPicCreation = QGroupBox(self.centralwidget)
        self.BrickPicCreation.setObjectName(u"BrickPicCreation")
        self.BrickPicCreation.setGeometry(QRect(10, 10, 1301, 441))
        self.BrickPicCreation.setFont(font)
        self.GB_Original = QGroupBox(self.BrickPicCreation)
        self.GB_Original.setObjectName(u"GB_Original")
        self.GB_Original.setGeometry(QRect(10, 30, 491, 401))
        self.GB_Original.setFont(font)
        self.original_pic = QLabel(self.GB_Original)
        self.original_pic.setObjectName(u"original_pic")
        self.original_pic.setGeometry(QRect(10, 30, 471, 331))
        self.original_pic.setAutoFillBackground(True)
        self.original_pic.setFrameShape(QFrame.StyledPanel)
        self.original_pic.setAlignment(Qt.AlignCenter)
        self.original_pic_label = QLabel(self.GB_Original)
        self.original_pic_label.setObjectName(u"original_pic_label")
        self.original_pic_label.setGeometry(QRect(100, 370, 381, 20))
        self.original_pic_label.setFont(font)
        self.original_pic_label.setFrameShape(QFrame.StyledPanel)
        self.pb_OpenOriginalbild = QPushButton(self.GB_Original)
        self.pb_OpenOriginalbild.setObjectName(u"pb_OpenOriginalbild")
        self.pb_OpenOriginalbild.setGeometry(QRect(10, 370, 80, 21))
        self.GB_BrickPic = QGroupBox(self.BrickPicCreation)
        self.GB_BrickPic.setObjectName(u"GB_BrickPic")
        self.GB_BrickPic.setGeometry(QRect(800, 30, 491, 401))
        self.GB_BrickPic.setFont(font)
        self.brick_pic = QLabel(self.GB_BrickPic)
        self.brick_pic.setObjectName(u"brick_pic")
        self.brick_pic.setGeometry(QRect(10, 30, 471, 331))
        self.brick_pic.setAutoFillBackground(True)
        self.brick_pic.setFrameShape(QFrame.StyledPanel)
        self.brick_pic.setAlignment(Qt.AlignCenter)
        self.brick_pic_label = QLabel(self.GB_BrickPic)
        self.brick_pic_label.setObjectName(u"brick_pic_label")
        self.brick_pic_label.setGeometry(QRect(10, 370, 381, 20))
        self.brick_pic_label.setFont(font)
        self.brick_pic_label.setFrameShape(QFrame.StyledPanel)
        self.pb_SaveBrickPic = QPushButton(self.GB_BrickPic)
        self.pb_SaveBrickPic.setObjectName(u"pb_SaveBrickPic")
        self.pb_SaveBrickPic.setEnabled(False)
        self.pb_SaveBrickPic.setGeometry(QRect(400, 370, 80, 21))
        self.GB_PicOptions = QGroupBox(self.BrickPicCreation)
        self.GB_PicOptions.setObjectName(u"GB_PicOptions")
        self.GB_PicOptions.setGeometry(QRect(510, 30, 281, 401))
        self.GB_PicOptions.setFont(font)
        self.label_farbpalette = QLabel(self.GB_PicOptions)
        self.label_farbpalette.setObjectName(u"label_farbpalette")
        self.label_farbpalette.setGeometry(QRect(10, 30, 61, 31))
        self.PaletteChoice = QComboBox(self.GB_PicOptions)
        self.PaletteChoice.setObjectName(u"PaletteChoice")
        self.PaletteChoice.setGeometry(QRect(80, 30, 191, 31))
        self.PaletteChoice.setMaxVisibleItems(5)
        self.PaletteChoice.addItems(['Einfach (16 Farben)', 'Graustufen (4 Farben)', 'Komplett (40 Farben)'])
        self.PaletteChoice.setCurrentIndex(-1)
        self.chosen_palette_number = -1
        self.PaletteChoice.setEnabled(False)
        self.pic_size_slider = QSlider(self.GB_PicOptions)
        self.pic_size_slider.setObjectName(u"pic_size_slider")
        self.pic_size_slider.setEnabled(False)
        self.pic_size_slider.setGeometry(QRect(10, 230, 261, 21))
        self.pic_size_slider.setMinimum(16)
        self.pic_size_slider.setMaximum(500)
        self.pic_size_slider.setValue(16)
        self.pic_size_slider.setTracking(True)
        self.pic_size_slider.setOrientation(Qt.Horizontal)
        self.pic_size_slider.setInvertedAppearance(False)
        self.pic_size_slider.setTickPosition(QSlider.TicksBelow)
        self.label_farbpalette_2 = QLabel(self.GB_PicOptions)
        self.label_farbpalette_2.setObjectName(u"label_farbpalette_2")
        self.label_farbpalette_2.setGeometry(QRect(10, 200, 261, 21))
        self.label_farbpalette_2.setFont(font)
        self.farbpalette = QLabel(self.GB_PicOptions)
        self.farbpalette.setObjectName(u"farbpalette")
        self.farbpalette.setGeometry(QRect(11, 71, 260, 100))
        self.farbpalette.setAutoFillBackground(True)
        self.farbpalette.setFrameShape(QFrame.StyledPanel)
        self.farbpalette.setAlignment(Qt.AlignCenter)
        self.label_rastersize = QLabel(self.GB_PicOptions)
        self.label_rastersize.setObjectName(u"label_rastersize")
        self.label_rastersize.setGeometry(QRect(10, 260, 101, 21))
        self.label_rastersize.setFont(font)
        self.label_rastersize_2 = QLabel(self.GB_PicOptions)
        self.label_rastersize_2.setObjectName(u"label_rastersize_2")
        self.label_rastersize_2.setGeometry(QRect(10, 320, 101, 21))
        self.label_rastersize_2.setFont(font)
        self.bpsize = QLabel(self.GB_PicOptions)
        self.bpsize.setObjectName(u"bpsize")
        self.bpsize.setGeometry(QRect(120, 260, 151, 21))
        self.bpsize.setFont(font)
        self.bpsize.setFrameShape(QFrame.StyledPanel)
        self.stonecount = QLabel(self.GB_PicOptions)
        self.stonecount.setObjectName(u"stonecount")
        self.stonecount.setGeometry(QRect(120, 290, 151, 21))
        self.stonecount.setFont(font)
        self.stonecount.setFrameShape(QFrame.StyledPanel)
        self.label_stonecount = QLabel(self.GB_PicOptions)
        self.label_stonecount.setObjectName(u"label_stonecount")
        self.label_stonecount.setGeometry(QRect(10, 290, 101, 21))
        self.label_stonecount.setFont(font)
        self.bpsize_metric_2 = QLabel(self.GB_PicOptions)
        self.bpsize_metric_2.setObjectName(u"bpsize_metric_2")
        self.bpsize_metric_2.setGeometry(QRect(120, 320, 151, 21))
        self.bpsize_metric_2.setFont(font)
        self.bpsize_metric_2.setFrameShape(QFrame.StyledPanel)
        self.pb_createBrickPic = QPushButton(self.GB_PicOptions)
        self.pb_createBrickPic.setObjectName(u"pb_createBrickPic")
        self.pb_createBrickPic.setEnabled(False)
        self.pb_createBrickPic.setGeometry(QRect(10, 360, 261, 31))
        self.GB_ErstellOptionen = QGroupBox(self.centralwidget)
        self.GB_ErstellOptionen.setObjectName(u"GB_ErstellOptionen")
        self.GB_ErstellOptionen.setGeometry(QRect(10, 450, 371, 391))
        self.GB_ErstellOptionen.setFont(font)
        self.GB_BrickAuswahl = QGroupBox(self.GB_ErstellOptionen)
        self.GB_BrickAuswahl.setObjectName(u"GB_BrickAuswahl")
        self.GB_BrickAuswahl.setGeometry(QRect(10, 30, 351, 311))
        self.cb1m2 = QCheckBox(self.GB_BrickAuswahl)
        self.cb1m2.setObjectName(u"cb1m2")
        self.cb1m2.setGeometry(QRect(10, 30, 61, 19))
        self.cb1m2.setCheckable(True)
        self.cb1m2.setChecked(True)
        self.cb1m3 = QCheckBox(self.GB_BrickAuswahl)
        self.cb1m3.setObjectName(u"cb1m3")
        self.cb1m3.setGeometry(QRect(10, 50, 61, 19))
        self.cb1m3.setCheckable(True)
        self.cb1m3.setChecked(True)
        self.cb1m4 = QCheckBox(self.GB_BrickAuswahl)
        self.cb1m4.setObjectName(u"cb1m4")
        self.cb1m4.setGeometry(QRect(10, 70, 61, 19))
        self.cb1m4.setCheckable(True)
        self.cb1m4.setChecked(True)
        self.cb1m5 = QCheckBox(self.GB_BrickAuswahl)
        self.cb1m5.setObjectName(u"cb1m5")
        self.cb1m5.setGeometry(QRect(10, 90, 61, 19))
        self.cb1m5.setCheckable(True)
        self.cb1m5.setChecked(True)
        self.cb1m8 = QCheckBox(self.GB_BrickAuswahl)
        self.cb1m8.setObjectName(u"cb1m8")
        self.cb1m8.setGeometry(QRect(10, 130, 61, 19))
        self.cb1m8.setCheckable(True)
        self.cb1m8.setChecked(True)
        self.cb1m6 = QCheckBox(self.GB_BrickAuswahl)
        self.cb1m6.setObjectName(u"cb1m6")
        self.cb1m6.setGeometry(QRect(10, 110, 61, 19))
        self.cb1m6.setCheckable(True)
        self.cb1m6.setChecked(True)
        self.cb1m10 = QCheckBox(self.GB_BrickAuswahl)
        self.cb1m10.setObjectName(u"cb1m10")
        self.cb1m10.setGeometry(QRect(10, 150, 61, 19))
        self.cb1m10.setCheckable(True)
        self.cb1m10.setChecked(True)
        self.cb1m12 = QCheckBox(self.GB_BrickAuswahl)
        self.cb1m12.setObjectName(u"cb1m12")
        self.cb1m12.setGeometry(QRect(10, 170, 61, 19))
        self.cb1m12.setCheckable(True)
        self.cb1m12.setChecked(True)
        self.cb4m12 = QCheckBox(self.GB_BrickAuswahl)
        self.cb4m12.setObjectName(u"cb4m12")
        self.cb4m12.setGeometry(QRect(70, 270, 61, 19))
        self.cb4m12.setCheckable(True)
        self.cb4m12.setChecked(True)
        self.cb2m10 = QCheckBox(self.GB_BrickAuswahl)
        self.cb2m10.setObjectName(u"cb2m10")
        self.cb2m10.setGeometry(QRect(70, 50, 61, 19))
        self.cb2m10.setCheckable(True)
        self.cb2m10.setChecked(True)
        self.cb8m11 = QCheckBox(self.GB_BrickAuswahl)
        self.cb8m11.setObjectName(u"cb8m11")
        self.cb8m11.setGeometry(QRect(130, 210, 61, 19))
        self.cb8m11.setCheckable(True)
        self.cb8m11.setChecked(True)
        self.cb4m10 = QCheckBox(self.GB_BrickAuswahl)
        self.cb4m10.setObjectName(u"cb4m10")
        self.cb4m10.setGeometry(QRect(70, 250, 61, 19))
        self.cb4m10.setCheckable(True)
        self.cb4m10.setChecked(True)
        self.cb2m6 = QCheckBox(self.GB_BrickAuswahl)
        self.cb2m6.setObjectName(u"cb2m6")
        self.cb2m6.setGeometry(QRect(10, 270, 61, 19))
        self.cb2m6.setCheckable(True)
        self.cb2m6.setChecked(True)
        self.cb4m8 = QCheckBox(self.GB_BrickAuswahl)
        self.cb4m8.setObjectName(u"cb4m8")
        self.cb4m8.setGeometry(QRect(70, 230, 61, 19))
        self.cb4m8.setCheckable(True)
        self.cb4m8.setChecked(True)
        self.cb2m8 = QCheckBox(self.GB_BrickAuswahl)
        self.cb2m8.setObjectName(u"cb2m8")
        self.cb2m8.setGeometry(QRect(70, 30, 61, 19))
        self.cb2m8.setCheckable(True)
        self.cb2m8.setChecked(True)
        self.cb4m6 = QCheckBox(self.GB_BrickAuswahl)
        self.cb4m6.setObjectName(u"cb4m6")
        self.cb4m6.setGeometry(QRect(70, 210, 61, 19))
        self.cb4m6.setCheckable(True)
        self.cb4m6.setChecked(True)
        self.cb2m12 = QCheckBox(self.GB_BrickAuswahl)
        self.cb2m12.setObjectName(u"cb2m12")
        self.cb2m12.setGeometry(QRect(70, 70, 61, 19))
        self.cb2m12.setCheckable(True)
        self.cb2m12.setChecked(True)
        self.cb4m4 = QCheckBox(self.GB_BrickAuswahl)
        self.cb4m4.setObjectName(u"cb4m4")
        self.cb4m4.setGeometry(QRect(70, 190, 61, 19))
        self.cb4m4.setCheckable(True)
        self.cb4m4.setChecked(True)
        self.cb2m14 = QCheckBox(self.GB_BrickAuswahl)
        self.cb2m14.setObjectName(u"cb2m14")
        self.cb2m14.setGeometry(QRect(70, 90, 61, 19))
        self.cb2m14.setCheckable(True)
        self.cb2m14.setChecked(True)
        self.cb3m3 = QCheckBox(self.GB_BrickAuswahl)
        self.cb3m3.setObjectName(u"cb3m3")
        self.cb3m3.setGeometry(QRect(70, 150, 61, 19))
        self.cb3m3.setCheckable(True)
        self.cb3m3.setChecked(True)
        self.cb2m2 = QCheckBox(self.GB_BrickAuswahl)
        self.cb2m2.setObjectName(u"cb2m2")
        self.cb2m2.setGeometry(QRect(10, 210, 61, 19))
        self.cb2m2.setCheckable(True)
        self.cb2m2.setChecked(True)
        self.cb2m4 = QCheckBox(self.GB_BrickAuswahl)
        self.cb2m4.setObjectName(u"cb2m4")
        self.cb2m4.setGeometry(QRect(10, 250, 61, 19))
        self.cb2m4.setCheckable(True)
        self.cb2m4.setChecked(True)
        self.cb2m16 = QCheckBox(self.GB_BrickAuswahl)
        self.cb2m16.setObjectName(u"cb2m16")
        self.cb2m16.setGeometry(QRect(70, 110, 61, 19))
        self.cb2m16.setCheckable(True)
        self.cb2m16.setChecked(True)
        self.cb2m3 = QCheckBox(self.GB_BrickAuswahl)
        self.cb2m3.setObjectName(u"cb2m3")
        self.cb2m3.setGeometry(QRect(10, 230, 61, 19))
        self.cb2m3.setCheckable(True)
        self.cb2m3.setChecked(True)
        self.cb6m14 = QCheckBox(self.GB_BrickAuswahl)
        self.cb6m14.setObjectName(u"cb6m14")
        self.cb6m14.setGeometry(QRect(130, 110, 61, 19))
        self.cb6m14.setCheckable(True)
        self.cb6m14.setChecked(True)
        self.cb8m8 = QCheckBox(self.GB_BrickAuswahl)
        self.cb8m8.setObjectName(u"cb8m8")
        self.cb8m8.setGeometry(QRect(130, 190, 61, 19))
        self.cb8m8.setCheckable(True)
        self.cb8m8.setChecked(True)
        self.cb6m16 = QCheckBox(self.GB_BrickAuswahl)
        self.cb6m16.setObjectName(u"cb6m16")
        self.cb6m16.setGeometry(QRect(130, 130, 61, 19))
        self.cb6m16.setCheckable(True)
        self.cb6m16.setChecked(True)
        self.cb6m12 = QCheckBox(self.GB_BrickAuswahl)
        self.cb6m12.setObjectName(u"cb6m12")
        self.cb6m12.setGeometry(QRect(130, 90, 61, 19))
        self.cb6m12.setCheckable(True)
        self.cb6m12.setChecked(True)
        self.cb6m6 = QCheckBox(self.GB_BrickAuswahl)
        self.cb6m6.setObjectName(u"cb6m6")
        self.cb6m6.setGeometry(QRect(130, 30, 61, 19))
        self.cb6m6.setCheckable(True)
        self.cb6m6.setChecked(True)
        self.cb6m10 = QCheckBox(self.GB_BrickAuswahl)
        self.cb6m10.setObjectName(u"cb6m10")
        self.cb6m10.setGeometry(QRect(130, 70, 61, 19))
        self.cb6m10.setCheckable(True)
        self.cb6m10.setChecked(True)
        self.cb6m24 = QCheckBox(self.GB_BrickAuswahl)
        self.cb6m24.setObjectName(u"cb6m24")
        self.cb6m24.setGeometry(QRect(130, 150, 61, 19))
        self.cb6m24.setCheckable(True)
        self.cb6m24.setChecked(True)
        self.cb6m8 = QCheckBox(self.GB_BrickAuswahl)
        self.cb6m8.setObjectName(u"cb6m8")
        self.cb6m8.setGeometry(QRect(130, 50, 61, 19))
        self.cb6m8.setCheckable(True)
        self.cb6m8.setChecked(True)
        self.cb8m16 = QCheckBox(self.GB_BrickAuswahl)
        self.cb8m16.setObjectName(u"cb8m16")
        self.cb8m16.setGeometry(QRect(130, 230, 61, 19))
        self.cb8m16.setCheckable(True)
        self.cb8m16.setChecked(True)
        self.cb16m16 = QCheckBox(self.GB_BrickAuswahl)
        self.cb16m16.setObjectName(u"cb16m16")
        self.cb16m16.setGeometry(QRect(130, 270, 61, 19))
        self.cb16m16.setCheckable(True)
        self.cb16m16.setChecked(True)
        self.label = QLabel(self.GB_BrickAuswahl)
        self.label.setObjectName(u"label")
        self.label.setGeometry(QRect(220, 40, 111, 21))
        self.label.setAlignment(Qt.AlignCenter)
        self.pb_none = QPushButton(self.GB_BrickAuswahl)
        self.pb_none.setObjectName(u"pb_none")
        self.pb_none.setGeometry(QRect(220, 80, 111, 31))
        self.pb_small = QPushButton(self.GB_BrickAuswahl)
        self.pb_small.setObjectName(u"pb_small")
        self.pb_small.setGeometry(QRect(220, 140, 111, 31))
        self.pb_mid = QPushButton(self.GB_BrickAuswahl)
        self.pb_mid.setObjectName(u"pb_mid")
        self.pb_mid.setGeometry(QRect(220, 200, 111, 31))
        self.pb_all = QPushButton(self.GB_BrickAuswahl)
        self.pb_all.setObjectName(u"pb_all")
        self.pb_all.setGeometry(QRect(220, 260, 111, 31))
        self.pb_createBrickList_Man = QPushButton(self.GB_ErstellOptionen)
        self.pb_createBrickList_Man.setObjectName(u"pb_createBrickList_Man")
        self.pb_createBrickList_Man.setEnabled(False)
        self.pb_createBrickList_Man.setGeometry(QRect(10, 350, 351, 31))
        self.GB_Results = QGroupBox(self.centralwidget)
        self.GB_Results.setObjectName(u"GB_Results")
        self.GB_Results.setGeometry(QRect(400, 450, 911, 391))
        self.GB_Results.setFont(font)
        self.GB_BrickListe = QGroupBox(self.GB_Results)
        self.GB_BrickListe.setObjectName(u"GB_BrickListe")
        self.GB_BrickListe.setGeometry(QRect(10, 20, 431, 321))
        self.BrickListe = QTableWidget(self.GB_BrickListe)
        self.BrickListe.setObjectName(u"BrickListe")
        self.BrickListe.setGeometry(QRect(10, 30, 411, 281))
        self.BrickListe.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.BrickListe.verticalHeader().setVisible(False)
        self.BrickListe.setColumnCount(6)
        self.BrickListe.setRowCount(10)
        header = self.BrickListe.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(4, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(5, QHeaderView.ResizeMode.Stretch)
        self.BrickListe.setHorizontalHeaderLabels(['Anzahl', 'Bricks', 'Art-Nr.', 'Farbnr.', 'Farbname Deutsch', 'Farbname Englisch'])
        self.GB_ManPreview = QGroupBox(self.GB_Results)
        self.GB_ManPreview.setObjectName(u"GB_ManPreview")
        self.GB_ManPreview.setGeometry(QRect(450, 20, 451, 361))
        self.manpreview = QLabel(self.GB_ManPreview)
        self.manpreview.setObjectName(u"manpreview")
        self.manpreview.setGeometry(QRect(10, 30, 431, 321))
        self.manpreview.setAutoFillBackground(True)
        self.manpreview.setFrameShape(QFrame.StyledPanel)
        self.manpreview.setAlignment(Qt.AlignCenter)
        self.pb_SaveBrickList = QPushButton(self.GB_Results)
        self.pb_SaveBrickList.setObjectName(u"pb_SaveBrickList")
        self.pb_SaveBrickList.setEnabled(False)
        self.pb_SaveBrickList.setGeometry(QRect(10, 350, 211, 31))
        self.pb_SaveBrickList.setCheckable(False)
        self.pb_SaveBrickMan = QPushButton(self.GB_Results)
        self.pb_SaveBrickMan.setObjectName(u"pb_SaveBrickMan")
        self.pb_SaveBrickMan.setEnabled(False)
        self.pb_SaveBrickMan.setGeometry(QRect(230, 350, 211, 31))
        self.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(self)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 1321, 20))
        self.menubar.setFont(font)
        self.menuStart = QMenu(self.menubar)
        self.menuStart.setObjectName(u"menuStart")
        self.menuPicture = QMenu(self.menubar)
        self.menuPicture.setObjectName(u"menuPicture")
        self.menuBrickListe = QMenu(self.menubar)
        self.menuBrickListe.setObjectName(u"menuBrickListe")
        self.menuAnleitung = QMenu(self.menubar)
        self.menuAnleitung.setObjectName(u"menuAnleitung")
        self.setMenuBar(self.menubar)
        self.menubar.addAction(self.menuStart.menuAction())
        self.menubar.addAction(self.menuPicture.menuAction())
        self.menubar.addAction(self.menuBrickListe.menuAction())
        self.menubar.addAction(self.menuAnleitung.menuAction())
        self.menuStart.addAction(self.actionNew_Project)
        self.menuStart.addAction(self.actionOpen_Project)
        self.menuStart.addAction(self.actionSave_Project)
        self.menuStart.addAction(self.actionSave_Project_under)
        self.menuStart.addSeparator()
        self.menuStart.addAction(self.actionHilfe)
        self.menuStart.addAction(self.actionAbout_BrickPicCreator)
        self.menuStart.addSeparator()
        self.menuStart.addAction(self.actionBeenden)
        self.menuPicture.addAction(self.actionOriginalbildOpen)
        self.menuPicture.addAction(self.actionBrickPicSave)
        self.menuBrickListe.addAction(self.actionBLSpeichern)
        self.menuBrickListe.addAction(self.actionBLDrucken)
        self.menuAnleitung.addAction(self.actionManSpeichern)
        self.menuAnleitung.addAction(self.actionManDrucken)
        self.retranslateUi()
        self.actionBeenden.triggered.connect(self.close)
        self.actionAbout_BrickPicCreator.triggered.connect(self.OpenAbout)
        self.actionBLDrucken.triggered.connect(self.PrintBrickList)
        self.actionBLSpeichern.triggered.connect(self.SaveBrickList)
        self.actionBrickPicSave.triggered.connect(self.SaveBrickPic)
        self.actionHilfe.triggered.connect(self.OpenHelp)
        self.actionManDrucken.triggered.connect(self.PrintManual)
        self.actionManSpeichern.triggered.connect(self.SaveManual)
        self.actionNew_Project.triggered.connect(self.NewProject)
        self.actionOpen_Project.triggered.connect(self.OpenProject)
        self.actionSave_Project.triggered.connect(self.SaveProject)
        self.actionOriginalbildOpen.triggered.connect(self.OpenOriginalPicture)
        self.actionSave_Project_under.triggered.connect(self.SaveProjectUnder)
        self.pb_none.clicked.connect(self.Auswahl_1m1)
        self.pb_small.clicked.connect(self.Auswahl_small)
        self.pb_mid.clicked.connect(self.Auswahl_mid)
        self.pb_all.clicked.connect(self.Auswahl_all)
        self.pb_createBrickPic.clicked.connect(self.CreateBrickPic)
        self.pb_createBrickList_Man.clicked.connect(self.CreateBrickList_Man)
        self.pb_OpenOriginalbild.clicked.connect(self.OpenOriginalPicture)
        self.PaletteChoice.currentIndexChanged.connect(self.SetColourPalette)
        self.pic_size_slider.valueChanged.connect(self.Set_Palette_Text)
        self.pb_SaveBrickPic.clicked.connect(self.SaveBrickPic)
        self.pb_SaveBrickList.clicked.connect(self.SaveBrickList)
        self.pb_SaveBrickMan.clicked.connect(self.SaveManual)
        QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        self.setWindowTitle(QCoreApplication.translate("self", u"BrickPicCreator", None))
        self.actionNew_Project.setText(QCoreApplication.translate("self", u"Neues Projekt", None))
        self.actionOpen_Project.setText(QCoreApplication.translate("self", u"Projekt \u00f6ffnen...", None))
        self.actionSave_Project.setText(QCoreApplication.translate("self", u"Projekt speichern", None))
        self.actionSave_Project_under.setText(QCoreApplication.translate("self", u"Projekt speichern unter...", None))
        self.actionHilfe.setText(QCoreApplication.translate("self", u"Hilfe...", None))
        self.actionAbout_BrickPicCreator.setText(QCoreApplication.translate("self", u"\u00dcber BrickPicCreator...", None))
        self.actionBeenden.setText(QCoreApplication.translate("self", u"Beenden", None))
        self.actionOriginalbildOpen.setText(QCoreApplication.translate("self", u"Originalbild \u00f6ffnen...", None))
        self.actionBrickPicSave.setText(QCoreApplication.translate("self", u"BrickPic speichern...", None))
        self.actionBLSpeichern.setText(QCoreApplication.translate("self", u"Speichern...", None))
        self.actionBLDrucken.setText(QCoreApplication.translate("self", u"Drucken...", None))
        self.actionManSpeichern.setText(QCoreApplication.translate("self", u"Speichern...", None))
        self.actionManDrucken.setText(QCoreApplication.translate("self", u"Drucken...", None))
        self.BrickPicCreation.setTitle(QCoreApplication.translate("self", u"Bilderstellung", None))
        self.GB_Original.setTitle(QCoreApplication.translate("self", u"Originalbild", None))
        self.original_pic.setText(QCoreApplication.translate("self", u"Kein Originalbild...", None))
        self.original_pic_label.setText(QCoreApplication.translate("self", u"Kein Originalbild...", None))
        self.pb_OpenOriginalbild.setText(QCoreApplication.translate("self", u"\u00d6ffnen...", None))
        self.GB_BrickPic.setTitle(QCoreApplication.translate("self", u"BrickPic", None))
        self.brick_pic.setText(QCoreApplication.translate("self", u"Kein BrickPic erstellt!", None))
        self.brick_pic_label.setText(QCoreApplication.translate("self", u"Kein BrickPic erstellt!", None))
        self.pb_SaveBrickPic.setText(QCoreApplication.translate("self", u"Speichern...", None))
        self.GB_PicOptions.setTitle(QCoreApplication.translate("self", u"Einstellungen", None))
        self.label_farbpalette.setText(QCoreApplication.translate("self", u"Farbpalette:", None))
        self.PaletteChoice.setCurrentText("")
        self.PaletteChoice.setPlaceholderText(QCoreApplication.translate("self", u"bitte ausw\u00e4hlen...", None))
        self.label_farbpalette_2.setText(QCoreApplication.translate("self", u"gew\u00fcnschte BrickPic-Gr\u00f6\u00dfe:", None))
        self.farbpalette.setText(QCoreApplication.translate("self", u"Keine Farbpalette ausgew\u00e4hlt!", None))
        self.label_rastersize.setText(QCoreApplication.translate("self", u"Rastergr\u00f6\u00dfe:", None))
        self.label_rastersize_2.setText(QCoreApplication.translate("self", u"Tats\u00e4chliche Gr\u00f6\u00dfe:", None))
        self.bpsize.setText(QCoreApplication.translate("self", u"Kein Originalbild...", None))
        self.stonecount.setText(QCoreApplication.translate("self", u"Kein Originalbild...", None))
        self.label_stonecount.setText(QCoreApplication.translate("self", u"Anzahl Steinfelder:", None))
        self.bpsize_metric_2.setText(QCoreApplication.translate("self", u"Kein Originalbild...", None))
        self.pb_createBrickPic.setText(QCoreApplication.translate("self", u"BrickPic erstellen", None))
        self.GB_ErstellOptionen.setTitle(QCoreApplication.translate("self", u"Erstelloptionen", None))
        self.GB_BrickAuswahl.setTitle(QCoreApplication.translate("self", u"Brick Auswahl", None))
        self.cb1m2.setText(QCoreApplication.translate("self", u"1x2", None))
        self.cb1m3.setText(QCoreApplication.translate("self", u"1x3", None))
        self.cb1m4.setText(QCoreApplication.translate("self", u"1x4", None))
        self.cb1m5.setText(QCoreApplication.translate("self", u"1x5", None))
        self.cb1m8.setText(QCoreApplication.translate("self", u"1x8", None))
        self.cb1m6.setText(QCoreApplication.translate("self", u"1x6", None))
        self.cb1m10.setText(QCoreApplication.translate("self", u"1x10", None))
        self.cb1m12.setText(QCoreApplication.translate("self", u"1x12", None))
        self.cb4m12.setText(QCoreApplication.translate("self", u"4x12", None))
        self.cb2m10.setText(QCoreApplication.translate("self", u"2x10", None))
        self.cb8m11.setText(QCoreApplication.translate("self", u"8x11", None))
        self.cb4m10.setText(QCoreApplication.translate("self", u"4x10", None))
        self.cb2m6.setText(QCoreApplication.translate("self", u"2x6", None))
        self.cb4m8.setText(QCoreApplication.translate("self", u"4x8", None))
        self.cb2m8.setText(QCoreApplication.translate("self", u"2x8", None))
        self.cb4m6.setText(QCoreApplication.translate("self", u"4x6", None))
        self.cb2m12.setText(QCoreApplication.translate("self", u"2x12", None))
        self.cb4m4.setText(QCoreApplication.translate("self", u"4x4", None))
        self.cb2m14.setText(QCoreApplication.translate("self", u"2x14", None))
        self.cb3m3.setText(QCoreApplication.translate("self", u"3x3", None))
        self.cb2m2.setText(QCoreApplication.translate("self", u"2x2", None))
        self.cb2m4.setText(QCoreApplication.translate("self", u"2x4", None))
        self.cb2m16.setText(QCoreApplication.translate("self", u"2x16", None))
        self.cb2m3.setText(QCoreApplication.translate("self", u"2x3", None))
        self.cb6m14.setText(QCoreApplication.translate("self", u"6x14", None))
        self.cb8m8.setText(QCoreApplication.translate("self", u"8x8", None))
        self.cb6m16.setText(QCoreApplication.translate("self", u"6x16", None))
        self.cb6m12.setText(QCoreApplication.translate("self", u"6x12", None))
        self.cb6m6.setText(QCoreApplication.translate("self", u"6x6", None))
        self.cb6m10.setText(QCoreApplication.translate("self", u"6x10", None))
        self.cb6m24.setText(QCoreApplication.translate("self", u"6x24", None))
        self.cb6m8.setText(QCoreApplication.translate("self", u"6x8", None))
        self.cb8m16.setText(QCoreApplication.translate("self", u"8x16", None))
        self.cb16m16.setText(QCoreApplication.translate("self", u"16x16", None))
        self.label.setText(QCoreApplication.translate("self", u"Schnellauswahl:", None))
        self.pb_none.setText(QCoreApplication.translate("self", u"Nur 1x1", None))
        self.pb_small.setText(QCoreApplication.translate("self", u"Kleine Gr\u00f6\u00dfen", None))
        self.pb_mid.setText(QCoreApplication.translate("self", u"Mittlere Gr\u00f6\u00dfen", None))
        self.pb_all.setText(QCoreApplication.translate("self", u"Alle", None))
        self.pb_createBrickList_Man.setText(QCoreApplication.translate("self", u"BrickPicCreation", None))
        self.GB_Results.setTitle(QCoreApplication.translate("self", u"Ergebnisse", None))
        self.GB_BrickListe.setTitle(QCoreApplication.translate("self", u"BrickListe", None))
        self.GB_ManPreview.setTitle(QCoreApplication.translate("self", u"Vorschau der Anleitung", None))
        self.manpreview.setText("")
        self.pb_SaveBrickList.setText(QCoreApplication.translate("self", u"BrickListe speichern...", None))
        self.pb_SaveBrickMan.setText(QCoreApplication.translate("self", u"Anleitung speichern...", None))
        self.menuStart.setTitle(QCoreApplication.translate("self", u"Datei", None))
        self.menuPicture.setTitle(QCoreApplication.translate("self", u"Bilder", None))
        self.menuBrickListe.setTitle(QCoreApplication.translate("self", u"BrickListe", None))
        self.menuAnleitung.setTitle(QCoreApplication.translate("self", u"Anleitung", None))

    def OpenAbout(self):
        about.show()

    def PrintBrickList(self):
        pass

    def SaveBrickList(self):
        pass

    def Set_Palette_Text(self):
        value = self.pic_size_slider.value()
        w = self.pixmapsize.width()
        h = self.pixmapsize.height()
        startwidth = 1
        self.rasterwidth = startwidth*value
        self.rasterheight = int((startwidth*value*h)/w)
        self.bpsize.setText(f'{self.rasterwidth} x {self.rasterheight} Steinfelder')
        self.stonecount.setText(f'{self.rasterwidth*self.rasterheight:,}'.replace(',', '.')+' Steinfelder')
        self.bpsize_metric_2.setText(f'{self.rasterwidth*0.78:.2f}'.replace('.', ',')+' x '+f'{self.rasterheight*0.78:.2f}'.replace('.', ',')+' cm')

    def SetColourPalette(self):
        self.chosen_palette_number = self.PaletteChoice.currentIndex()
        self.palette_filename = ''
        match self.chosen_palette_number:
            case 0:
                self.palette_filename = 'graphics/simple.png'
            case 1:
                self.palette_filename = 'graphics/greyscale.png'
            case 2:
                self.palette_filename = 'graphics/full.png'
        self.farbpalette.setPixmap(QPixmap(self.palette_filename).scaled(260, 100, Qt.AspectRatioMode.IgnoreAspectRatio, Qt.TransformationMode.FastTransformation))
        self.pic_size_slider.setEnabled(True)
        self.pb_createBrickPic.setEnabled(True)
        self.Set_Palette_Text()

    def SaveBrickPic(self):
        pass

    def OpenHelp(self):
        pass

    def PrintManual(self):
        pass

    def SaveManual(self):
        pass

    def NewProject(self):
        self.setupUi()

    def OpenProject(self):
        pass

    def SaveProject(self):
        pass

    def OpenOriginalPicture(self):
        cwd = os.getcwd()
        self.originalimagename = QFileDialog.getOpenFileName(self, 'Originalbild öffnen...', cwd, 'Image files (*.jpg *.gif *.svg *.png *.bmp)')[0]
        self.pixmapsize = QPixmap(self.originalimagename).rect().size()
        self.original_pic.setPixmap(QPixmap(self.originalimagename).scaled(470, 330, Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation))
        self.original_pic_label.setText(self.originalimagename)
        self.PaletteChoice.setEnabled(True)
        if self.chosen_palette_number >= 0:
            self.Set_Palette_Text()

    def SaveProjectUnder(self):
        pass

    def Auswahl_1m1(self):
        self.cb1m2.setChecked(False)
        self.cb1m3.setChecked(False)
        self.cb1m4.setChecked(False)
        self.cb1m5.setChecked(False)
        self.cb1m6.setChecked(False)
        self.cb1m8.setChecked(False)
        self.cb1m10.setChecked(False)
        self.cb1m12.setChecked(False)
        self.cb2m2.setChecked(False)
        self.cb2m3.setChecked(False)
        self.cb2m4.setChecked(False)
        self.cb2m6.setChecked(False)
        self.cb2m8.setChecked(False)
        self.cb2m10.setChecked(False)
        self.cb2m12.setChecked(False)
        self.cb2m14.setChecked(False)
        self.cb2m16.setChecked(False)
        self.cb3m3.setChecked(False)
        self.cb4m4.setChecked(False)
        self.cb4m6.setChecked(False)
        self.cb4m8.setChecked(False)
        self.cb4m10.setChecked(False)
        self.cb4m12.setChecked(False)
        self.cb6m6.setChecked(False)
        self.cb6m8.setChecked(False)
        self.cb6m10.setChecked(False)
        self.cb6m12.setChecked(False)
        self.cb6m14.setChecked(False)
        self.cb6m16.setChecked(False)
        self.cb6m24.setChecked(False)
        self.cb8m8.setChecked(False)
        self.cb8m11.setChecked(False)
        self.cb8m16.setChecked(False)
        self.cb16m16.setChecked(False)

    def Auswahl_small(self):
        self.cb1m2.setChecked(True)
        self.cb1m3.setChecked(True)
        self.cb1m4.setChecked(True)
        self.cb2m2.setChecked(True)
        self.cb2m3.setChecked(True)
        self.cb2m4.setChecked(True)
        self.cb3m3.setChecked(True)
        self.cb4m4.setChecked(True)

    def Auswahl_mid(self):
        self.cb1m5.setChecked(True)
        self.cb1m6.setChecked(True)
        self.cb1m8.setChecked(True)
        self.cb2m6.setChecked(True)
        self.cb2m8.setChecked(True)
        self.cb4m6.setChecked(True)
        self.cb4m8.setChecked(True)
        self.cb6m6.setChecked(True)
        self.cb6m8.setChecked(True)
        self.cb8m8.setChecked(True)

    def Auswahl_all(self):
        self.cb1m2.setChecked(True)
        self.cb1m3.setChecked(True)
        self.cb1m4.setChecked(True)
        self.cb1m5.setChecked(True)
        self.cb1m6.setChecked(True)
        self.cb1m8.setChecked(True)
        self.cb1m10.setChecked(True)
        self.cb1m12.setChecked(True)
        self.cb2m2.setChecked(True)
        self.cb2m3.setChecked(True)
        self.cb2m4.setChecked(True)
        self.cb2m6.setChecked(True)
        self.cb2m8.setChecked(True)
        self.cb2m10.setChecked(True)
        self.cb2m12.setChecked(True)
        self.cb2m14.setChecked(True)
        self.cb2m16.setChecked(True)
        self.cb3m3.setChecked(True)
        self.cb4m4.setChecked(True)
        self.cb4m6.setChecked(True)
        self.cb4m8.setChecked(True)
        self.cb4m10.setChecked(True)
        self.cb4m12.setChecked(True)
        self.cb6m6.setChecked(True)
        self.cb6m8.setChecked(True)
        self.cb6m10.setChecked(True)
        self.cb6m12.setChecked(True)
        self.cb6m14.setChecked(True)
        self.cb6m16.setChecked(True)
        self.cb6m24.setChecked(True)
        self.cb8m8.setChecked(True)
        self.cb8m11.setChecked(True)
        self.cb8m16.setChecked(True)
        self.cb16m16.setChecked(True)

    def CreateBrickPic(self):
        cwd = os.getcwd()
        pixmap = QPixmap.fromImage(Create_Brick_Image(self.originalimagename, self.palette_filename, (self.rasterwidth, self.rasterheight)))
        self.brick_pic.setPixmap(pixmap.scaled(470, 330, Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation))
        self.BrickPicFilename = cwd + '/graphics/brickpic_preview.png'
        self.brick_pic_label.setText(self.BrickPicFilename)
        self.pb_SaveBrickPic.setEnabled(True)
        self.pb_createBrickList_Man.setEnabled(True)

    def GetPossibleBricks(self):
        pbl = []
        pbl.extend(BrickSizes['1x1'])
        if self.cb1m2.isChecked():
            pbl.extend(BrickSizes['1x2'])
        if self.cb1m3.isChecked():
            pbl.extend(BrickSizes['1x3'])
        if self.cb1m4.isChecked():
            pbl.extend(BrickSizes['1x4'])
        if self.cb1m5.isChecked():
            pbl.extend(BrickSizes['1x5'])
        if self.cb1m6.isChecked():
            pbl.extend(BrickSizes['1x6'])
        if self.cb1m8.isChecked():
            pbl.extend(BrickSizes['1x8'])
        if self.cb1m10.isChecked():
            pbl.extend(BrickSizes['1x10'])
        if self.cb1m12.isChecked():
            pbl.extend(BrickSizes['1x12'])
        if self.cb2m2.isChecked():
            pbl.extend(BrickSizes['2x2'])
        if self.cb2m3.isChecked():
            pbl.extend(BrickSizes['2x3'])
        if self.cb2m4.isChecked():
            pbl.extend(BrickSizes['2x4'])
        if self.cb2m6.isChecked():
            pbl.extend(BrickSizes['2x6'])
        if self.cb2m8.isChecked():
            pbl.extend(BrickSizes['2x8'])
        if self.cb2m10.isChecked():
            pbl.extend(BrickSizes['2x10'])
        if self.cb2m12.isChecked():
            pbl.extend(BrickSizes['2x12'])
        if self.cb2m14.isChecked():
            pbl.extend(BrickSizes['2x14'])
        if self.cb2m16.isChecked():
            pbl.extend(BrickSizes['2x16'])
        if self.cb3m3.isChecked():
            pbl.extend(BrickSizes['3x3'])
        if self.cb4m4.isChecked():
            pbl.extend(BrickSizes['4x4'])
        if self.cb4m6.isChecked():
            pbl.extend(BrickSizes['4x6'])
        if self.cb4m8.isChecked():
            pbl.extend(BrickSizes['4x8'])
        if self.cb4m10.isChecked():
            pbl.extend(BrickSizes['4x10'])
        if self.cb4m12.isChecked():
            pbl.extend(BrickSizes['4x12'])
        if self.cb6m6.isChecked():
            pbl.extend(BrickSizes['6x6'])
        if self.cb6m8.isChecked():
            pbl.extend(BrickSizes['6x8'])
        if self.cb6m10.isChecked():
            pbl.extend(BrickSizes['6x10'])
        if self.cb6m12.isChecked():
            pbl.extend(BrickSizes['6x12'])
        if self.cb6m14.isChecked():
            pbl.extend(BrickSizes['6x14'])
        if self.cb6m16.isChecked():
            pbl.extend(BrickSizes['6x16'])
        if self.cb6m24.isChecked():
            pbl.extend(BrickSizes['6x24'])
        if self.cb8m8.isChecked():
            pbl.extend(BrickSizes['8x8'])
        if self.cb8m11.isChecked():
            pbl.extend(BrickSizes['8x11'])
        if self.cb8m16.isChecked():
            pbl.extend(BrickSizes['8x16'])
        if self.cb16m16.isChecked():
            pbl.extend(BrickSizes['16x16'])
        return pbl

    def CreateBrickList_Man(self):
        # First list of all possible bricks depending on chosen sizes
        self.arrlist = self.GetPossibleBricks()
        # Convert the created small brick image (resolution is 1 brick per pixel) to numpy ndarray
        self.imarray = get_array_from_image('graphics/brickpic.png')
        # Create list with best fitted bricks, as few as possipble
        self.bricklist_result = get_steine_liste_mit_pos(self.imarray, self.arrlist)
        # prettify the brick list for presentation
        self.shopping_list = get_shopping_list(self.bricklist_result)
        # Send prettified list to Ui QTableWidget
        self.BrickListe.setRowCount(len(self.shopping_list))
        for col in range(len(self.shopping_list[1])):
            for row in range(len(self.shopping_list)):
                cellItem = QTableWidgetItem()
                cellItem.setText(str(self.shopping_list[row][col]))
                if col < 4:
                    cellItem.setTextAlignment(Qt.AlignmentFlag.AlignCenter)
                self.BrickListe.setItem(row, col, cellItem)
        # Create Manual
        width, height, _ = self.imarray.shape
        manual_list = [e+ColourCodes[e[2]] for e in self.bricklist_result]
        self.man_image_pixmap = get_ManualImage(width, height, manual_list)
        pixmap = QPixmap.fromImage(self.man_image_pixmap)
        self.manpreview.setPixmap(pixmap.scaled(431, 321, Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation))

        self.pb_SaveBrickList.setEnabled(True)
        self.pb_SaveBrickMan.setEnabled(True)

    def SaveBrickPic(self):
        cwd = os.getcwd()
        filters = ['PNG (*.png)', 'JPEG (*.jpg)', 'BMP (*.bmp)', 'GIF (*.gif)']
        selectedFilter = 'PNG (png)'
        filters = ';;'.join(filters)
        old = self.BrickPicFilename
        self.BrickPicFilename = None
        self.BrickPicFilename = QFileDialog.getSaveFileName(self, "BrickPic speichern...", cwd+'/BrickPic.png', filters, selectedFilter)
        if self.BrickPicFilename[0]:
            self.brick_pic_label.setText(self.BrickPicFilename[0])
            SaveBrickPicAs(self.BrickPicFilename[0], self.BrickPicFilename[1])
        else:
            self.BrickPicFilename = old

    def SaveBrickList(self):
        cwd = os.getcwd()
        filters = 'PDF (*.pdf)'
        selectedFilter = 'PDF (pdf)'
        self.pdfListName = QFileDialog.getSaveFileName(self, "Klemmsteinliste speichern...", cwd, filters, selectedFilter)[0]
        if self.pdfListName:
            SaveListAsPDF(self.shopping_list, self.pdfListName.split('.')[0]+'.pdf', f'{self.rasterwidth} x {self.rasterheight}')

    def SaveManual(self):
        SaveManualImage(self.man_image_pixmap)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    about = AboutDialog()
    window = MainWindow()
    window.show()

    sys.exit(app.exec())
